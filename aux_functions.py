# -*- coding: utf-8 -*-
"""aux_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lSzHQ5O7MhAeYVppcNmpuaOlh8fmGCV3
"""

import os
import numpy as np
from datetime import datetime
from google.colab import drive
import matplotlib.pyplot as plt

drive.mount('/content/drive', force_remount=True)
project = '/content/drive/My Drive/final_project/'
save_path = os.path.join(project, 'images/')

def plot_image(ax, data, title):
  """
  Implementation of visualisation of GAF images
  """
  if data.ndim == 3:  # multiple channels
      ax.imshow(np.mean(data, axis=-1), cmap='gray', origin='lower')
  else:  # data is 2D
      ax.imshow(data, cmap='gray', origin='lower')
  ax.set_title(title)

  time = datetime.now().strftime("%d_%H%M")
  plt.savefig(os.path.join(save_path, f'img2img_cnn/GASF_{time}_Images'))

def plot_predictions(x_test, y_true, y_pred, window_size, num_samples=3):
  """
  Implements the code to visualise all predictions made by the model
  x_test: Image on which the model has been trained
  y_true: Image the model had to predict
  y_pred: Resulting image of the model as a prediction
  window_size: Size of images the model is handling
  num_samples: Number of samples to plot out of the complete list

  Returns: Image with 3 columns and 'num_samples' rows
  """
  plt.figure(figsize=(12, 4 * num_samples))

  for i in range(num_samples):
      # Plot original image
      plt.subplot(num_samples, 3, i * 3 + 1)
      plt.imshow(x_test[i].reshape(window_size, window_size), cmap='gray')
      plt.title("Original Image")

      # Plot true target image
      plt.subplot(num_samples, 3, i * 3 + 2)
      plt.imshow(y_true[i].reshape(window_size, window_size), cmap='gray')
      plt.title("True Target")

      # Plot predicted image
      plt.subplot(num_samples, 3, i * 3 + 3)
      plt.imshow(y_pred[i].reshape(window_size,window_size), cmap='gray')
      plt.title("Model Prediction")

  plt.tight_layout()
  time = datetime.now().strftime("%d_%H%M")
  plt.savefig(os.path.join(save_path, f'img2img_cnn/GASF_{time}_Predictions'))
  plt.show()

